/*
 Language: 4gl
 Website: https://en.wikipedia.org/wiki/SQL
 Category: common, database
 */

/*

Goals:

SQL is intended to highlight basic/common SQL keywords and expressions

- If pretty much every single SQL server includes supports, then it's a canidate.
- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
  PostgreSQL) although the list of data types is purposely a bit more expansive.
- For more specific SQL grammars please see:
  - PostgreSQL and PL/pgSQL - core
  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
  - sql_more (core)

 */

  export default function(hljs) {
    const regex = hljs.regex;
    const COMMENT_MODE = hljs.COMMENT('--', '#');
    const STRING = {
      className: 'string',
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [ { begin: /''/ } ]
        }
      ]
    };
    const QUOTED_IDENTIFIER = {
      begin: /"/,
      end: /"/,
      contains: [ { begin: /""/ } ]
    };
  
    const LITERALS = [
      "true",
      "false",
      // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
      "null",
      "unknown"
    ];
  
    const MULTI_WORD_TYPES = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ];
  
    const TYPES = [
      'bigint',
      'binary',
      'blob',
      'boolean',
      'char',
      'character',
      'clob',
      'date',
      'dec',
      'decfloat',
      'decimal',
      'float',
      'int',
      'integer',
      'interval',
      'nchar',
      'nclob',
      'national',
      'numeric',
      'real',
      'row',
      'smallint',
      'time',
      'timestamp',
      'varchar',
      'varying', // modifier (character varying)
      'varbinary'
    ];
  
    const NON_RESERVED_WORDS = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ];
  
    // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
    const RESERVED_WORDS = [
      "abort",
"abs",
"absolute",
"accept",
"access",
"acos",
"ada",
"add",
"after",
"all",
"allocate",
"alter",
"and",
"ansi",
"any",
"append",
"arg_val",
"array",
"arr_count",
"arr_curr",
"as",
"asc",
"ascending",
"ascii",
"asin",
"at",
"atan",
"atan2",
"attach",
"attribute",
"attributes",
"audit",
"authorization",
"auto",
"autonext",
"average",
"avg",
"before",
"begin",
"between",
"black",
"blink",
"blue",
"bold",
"boolean",
"border",
"both",
"bottom",
"break",
"buffered",
"by",
"byte",
"call",
"cascade",
"case",
"catch",
"char",
"character",
"character_length",
"char_length",
"check",
"circuit",
"class_origin",
"clear",
"clipped",
"close",
"cluster",
"cobol",
"color",
"column",
"columns",
"command",
"comment",
"comments",
"commit",
"committed",
"composites",
"compress",
"concurrent",
"connect",
"connection",
"connection_alias",
"constant",
"constrained",
"constraint",
"constraints",
"construct",
"continue",
"control",
"cos",
"count",
"create",
"current",
"cursor",
"cyan",
"data",
"database",
"dataskip",
"date",
"datetime",
"day",
"dba",
"dbinfo",
"dbservername",
"deallocate",
"debug",
"dec",
"decimal",
"declare",
"default",
"defaults",
"defer",
"deferred",
"define",
"delete",
"delimiter",
"delimiters",
"desc",
"descending",
"describe",
"descriptor",
"detach",
"diagnostics",
"dialog",
"dim",
"dirty",
"disabled",
"disconnect",
"display",
"distinct",
"distributions",
"do",
"dormant",
"double",
"down",
"downshift",
"drop",
"dynamic",
"each",
"elif",
"else",
"enabled",
"end",
"entry",
"error",
"errorlog",
"err_get",
"err_print",
"err_quit",
"esc",
"escape",
"every",
"exception",
"exclusive",
"exec",
"execute",
"exists",
"exit",
"exp",
"explain",
"expression",
"extend",
"extent",
"extern",
"external",
"f1",
"f10",
"f11",
"f12",
"f13",
"f14",
"f15",
"f16",
"f17",
"f18",
"f19",
"f2",
"f20",
"f21",
"f22",
"f23",
"f24",
"f25",
"f26",
"f27",
"f28",
"f29",
"f3",
"f30",
"f31",
"f32",
"f33",
"f34",
"f35",
"f36",
"f37",
"f38",
"f39",
"f4",
"f40",
"f41",
"f42",
"f43",
"f44",
"f45",
"f46",
"f47",
"f48",
"f49",
"f5",
"f50",
"f51",
"f52",
"f53",
"f54",
"f55",
"f56",
"f57",
"f58",
"f59",
"f6",
"f60",
"f61",
"f62",
"f63",
"f64",
"f7",
"f8",
"f9",
"false",
"fetch",
"fgl",
"fgl_getenv",
"fgl_keyval",
"fgl_lastkey",
"field",
"field_touched",
"file",
"fillfactor",
"filtering",
"finish",
"first",
"float",
"flush",
"for",
"foreach",
"foreign",
"form",
"format",
"formonly",
"fortran",
"found",
"fraction",
"fragment",
"free",
"from",
"function",
"get_fldbuf",
"getLength",
"global",
"globals",
"go",
"goto",
"grant",
"green",
"group",
"having",
"header",
"help",
"hex",
"hide",
"high",
"hold",
"hour",
"idata",
"if",
"ilength",
"immediate",
"import",
"in",
"include",
"index",
"indexes",
"indicator",
"infield",
"init",
"initialize",
"input",
"insert",
"instructions",
"int",
"integer",
"interrupt",
"interval",
"into",
"int_flag",
"invisible",
"is",
"isam",
"isolation",
"itype",
"key",
"label",
"language",
"last",
"leading",
"left",
"length",
"let",
"like",
"line",
"lineno",
"lines",
"load",
"locate",
"lock",
"log",
"log10",
"logn",
"long",
"low",
"magenta",
"main",
"margin",
"matches",
"max",
"mdy",
"medium",
"memory",
"menu",
"message",
"message_length",
"message_text",
"min",
"minute",
"mod",
"mode",
"modify",
"module",
"money",
"month",
"more",
"name",
"nchar",
"need",
"new",
"next",
"nextpage",
"no",
"nocr",
"noentry",
"none",
"normal",
"not",
"notfound",
"null",
"nullable",
"number",
"numeric",
"num_args",
"nvarchar",
"octet_length",
"of",
"off",
"old",
"on",
"only",
"open",
"optimization",
"option",
"options",
"or",
"order",
"otherwise",
"outer",
"output",
"page",
"pageno",
"pascal",
"pause",
"pdqpriority",
"percent",
"picture",
"pipe",
"pli",
"pow",
"precision",
"prepare",
"previous",
"prevpage",
"primary",
"print",
"printer",
"prior",
"private",
"privileges",
"procedure",
"program",
"prompt",
"public",
"put",
"quit",
"quit_flag",
"raise",
"range",
"read",
"readonly",
"real",
"record",
"recover",
"red",
"references",
"referencing",
"register",
"relative",
"remainder",
"remove",
"rename",
"reoptimization",
"repeatable",
"report",
"required",
"resolution",
"resource",
"restrict",
"resume",
"return",
"returns",
"returned_sqlstate",
"returning",
"reverse",
"revoke",
"right",
"robin",
"role",
"rollback",
"rollforward",
"root",
"round",
"row",
"rowid",
"rowids",
"rows",
"row_count",
"run",
"scale",
"schema",
"screen",
"scroll",
"scr_line",
"second",
"section",
"select",
"serial",
"serializable",
"server_name",
"session",
"set",
"set_count",
"share",
"short",
"show",
"sitename",
"size",
"sizeof",
"skip",
"sleep",
"smallfloat",
"smallint",
"some",
"space",
"spaces",
"sql",
"sqlawarn",
"sqlca",
"sqlcode",
"sqlerrd",
"sqlerrm",
"sqlerror",
"sqlerrp",
"sqlstate",
"sqlwarning",
"sqrt",
"stability",
"start",
"startlog",
"static",
"statistics",
"status",
"stdev",
"step",
"stop",
"string",
"struct",
"subclass_origin",
"sum",
"switch",
"synonym",
"system",
"sysblobs",
"syschecks",
"syscolauth",
"syscoldepend",
"syscolumns",
"sysconstraints",
"sysdefaults",
"sysdepend",
"sysdistrib",
"sysfragauth",
"sysfragments",
"sysindexes",
"sysobjstate",
"sysopclstr",
"sysprocauth",
"sysprocbody",
"sysprocplan",
"sysprocedures",
"sysreferences",
"sysroleauth",
"syssyntable",
"syssynonyms",
"systabauth",
"systables",
"systrigbody",
"systriggers",
"sysusers",
"sysviews",
"sysviolations",
"tab",
"table",
"tables",
"tan",
"temp",
"text",
"then",
"through",
"thru",
"time",
"to",
"today",
"top",
"total",
"trace",
"trailer",
"trailing",
"transaction",
"trigger",
"triggers",
"trim",
"true",
"trunc",
"try",
"type",
"typedef",
"uncommitted",
"unconstrained",
"underline",
"union",
"unique",
"units",
"unload",
"unlock",
"unsigned",
"up",
"update",
"upshift",
"user",
"using",
"validate",
"value",
"values",
"varchar",
"variables",
"variance",
"varying",
"verify",
"view",
"violations",
"wait",
"waiting",
"warning",
"weekday",
"when",
"whenever",
"where",
"while",
"white",
"window",
"with",
"without",
"wordwrap",
"work",
"wrap",
"write",
"year",
"yellow",
"zerofill",
    ];
  
    // these are reserved words we have identified to be functions
    // and should only be highlighted in a dispatch-like context
    // ie, array_agg(...), etc.
    const RESERVED_FUNCTIONS = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket",
    ];
  
    // these functions can
    const POSSIBLE_WITHOUT_PARENS = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ];
  
    // those exist to boost relevance making these very
    // "SQL like" keyword combos worth +1 extra relevance
    const COMBOS = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "breadth first",
      "input array",
      "input by name",
      "display by name",
      "display array",
      "construct by name",
      "open window",
      "cursor for",
      "cursor from"
    ];
  
    const FUNCTIONS = RESERVED_FUNCTIONS;
  
    const KEYWORDS = [
      ...RESERVED_WORDS,
      ...NON_RESERVED_WORDS
    ].filter((keyword) => {
      return !RESERVED_FUNCTIONS.includes(keyword);
    });
  
    const VARIABLE = {
      className: "variable",
      begin: /@[a-z0-9][a-z0-9_]*/,
    };
  
    const OPERATOR = {
      className: "operator",
      begin: /[-+*/=%^~]|(or|is|mod|not)|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0,
    };
  
    const FUNCTION_CALL = {
      begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
      relevance: 0,
      keywords: { built_in: FUNCTIONS }
    };
  
    // keywords with less than 3 letters are reduced in relevancy
    function reduceRelevancy(list, {
      exceptions, when
    } = {}) {
      const qualifyFn = when;
      exceptions = exceptions || [];
      return list.map((item) => {
        if (item.match(/\|\d+$/) || exceptions.includes(item)) {
          return item;
        } else if (qualifyFn(item)) {
          return `${item}|0`;
        } else {
          return item;
        }
      });
    }
  
    return {
      name: '4GL',
      case_insensitive: true,
      // does not include {} or HTML tags `</`
      illegal: /<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword:
          reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
        literal: LITERALS,
        type: TYPES,
        built_in: POSSIBLE_WITHOUT_PARENS
      },
      contains: [
        {
          begin: regex.either(...COMBOS),
          relevance: 0,
          keywords: {
            $pattern: /[\w\.]+/,
            keyword: KEYWORDS.concat(COMBOS),
            literal: LITERALS,
            type: TYPES
          },
        },
        {
          className: "type",
          begin: regex.either(...MULTI_WORD_TYPES)
        },
        FUNCTION_CALL,
        VARIABLE,
        STRING,
        QUOTED_IDENTIFIER,
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        COMMENT_MODE,
        OPERATOR
      ]
    };
  }
  
